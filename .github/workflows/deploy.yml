name: Continuous Integration - iBurguer

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: iburguer
  ROOT_PROJECT_DIRECTORY: FIAP
  PROJECT_NAME: FIAP.Diner.API
  TEST_PROJECT_NAME: FIAP.Diner.Tests
  AWS_EKS_CLUSTER_NAME: iburguer-cluster
  AWS_REGION: us-east-1

jobs:
  build-test:
    runs-on: ubuntu-latest
    environment:
      name: Iburguer

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "7.x"

      - name: Restore Dependencies
        run: dotnet restore ${{ env.ROOT_PROJECT_DIRECTORY}}/${{ env.PROJECT_NAME}}

      - name: Build Application
        run: dotnet build ${{ env.ROOT_PROJECT_DIRECTORY}}/${{ env.PROJECT_NAME}} --no-restore --configuration Release

      - name: Run Tests
        run: dotnet test ${{ env.ROOT_PROJECT_DIRECTORY}}/${{ env.TEST_PROJECT_NAME}}

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test
        run: echo ${{ secrets.AWS_ACCESS_KEY_ID }} && echo ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: k8s-cicd-iburguer
          IMAGE_TAG: ${{ steps.slug.outputs.sha8 }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: kubeconfig
      #   run: |
      #     aws eks update-kubeconfig --name ${{ env.AWS_EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}  --kubeconfig ./kubeconfig
      #     echo 'KUBE_CONFIG_DATA<<EOF' >> $GITHUB_ENV
      #     echo $(cat ./kubeconfig | base64) >> $GITHUB_ENV
      #     echo 'EOF' >> $GITHUB_ENV

      # - name: helm deploy
      #   uses: koslib/helm-eks-action@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ env.KUBE_CONFIG_DATA }}
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: k8s-cicd-iburguer
      #   with:
      #     command: |
      #       helm version
      #       kubectl version
      #       kubectl cluster-info
      #       helm upgrade k8s-cicd-iburguer --install --wait --set image.tag=${{ steps.slug.outputs.sha8 }} --set image.repository="$ECR_REGISTRY/$ECR_REPOSITORY" --set service.port="80" FIAP/k8s/artifacts.yaml -n default

      # - name: Deploy to EKS
      #   run: |
      #     kubectl apply -f FIAP/k8s/artifacts.yaml
